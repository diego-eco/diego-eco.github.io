mapview(mapa_cdmx, zcol = "Ing_prom")
mapa_cdmx %>% mapview(color = "white", lwd = 3, layer.name = "CDMX") +
mapview(mapa_cdmx, zcol = "Poblacion")
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE, fig.pos = "H")
# Create a sequence of numbers from 32 to 44.
print(seq(32,44))
# Find mean of numbers from 25 to 82.
print(mean(25:82))
# Find sum of numbers frm 41 to 68.
print(sum(41:68))
# Create a the number 3
print(3)
# Mostrar la palabra "Hola"
print("Hola")
# Mostrar la media de una lista de números, del 25 al 82
print(mean(25:82))
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
# Llamamos la función new.function que proporciona 6 como argumento.
new.function(4)
# Creamos una función sin argumento en function()
new.function <- function() {
for(i in 1:5) {
print(i^2)
}
}
# Llamamos a la función sin proporcionar un argumento.
new.function()
rm(list=ls())
# Creamos una función con argumentos.
new.function <- function(a,b,c) {
result <- a * b + c
print(result)
}
# Llamar a la función por posición de argumentos.
new.function(5,3,11)
# Llame a la función por los nombres de los argumentos..
new.function(a = 11, b = 5, c = 3)
# Llame a la función por los nombres de los argumentos..
new.function(b = 5, c = 3,,a = 11)
# Llame a la función por los nombres de los argumentos..
new.function(b = 5, c = 3,a = 11)
Live Demo
rm(list=ls())
knitr::include_graphics("environment.png")
a <- 2
b <- 5
f <- function(x) x<-0
ls()
environment()
.GlobalEnv
f
a <- 2
b <- 5
f <- function(x) x<-0
ls()
environment()
.GlobalEnv
f <- function(f_x){
g <- function(g_x){
print("Inside g")
print(environment())
print(ls())
}
g(5)
print("Inside f")
print(environment())
print(ls())
}
g(5)
print("Inside f")
print(environment())
print(ls())
f <- function(f_x){
g <- function(g_x){
print("Inside g")
print(environment())
print(ls())
}
g(5)
print("Inside f")
print(environment())
print(ls())
}
f(6)
outer_func <- function(){
b <- 20
inner_func <- function(){
c <- 30
}
}
a <- 10
View(outer_func)
a <- 10
```{r}
rm(list=ls())
outer_func <- function(){
b <- 20
inner_func <- function(){
c <- 30
}
}
a <- 10
a <- 10
outer_func()
print(a)
outer_func()
outer_func <- function(){
a <- 20
inner_func <- function(){
a <- 30
print(a)
}
inner_func()
print(a)
}
a <- 10
outer_func()
print(a)
outer_func <- function(){
inner_func <- function(){
a <<- 30
print(a)
}
inner_func()
print(a)
}
rm(list=ls())
outer_func <- function(){
inner_func <- function(){
a <<- 30
print(a)
}
inner_func()
print(a)
}
outer_func()
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE, fig.pos = "H")
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("01_hello"
runExample("01_hello")
runExample("01_hello")
shiny::runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
plot(rnorm(100),rnorm(100))
plot(rnorm(100),log(rnorm(100)))
plot(rnorm(100),log(rnorm(100)),type = l)
plot(rnorm(100,5,3),log(rnorm(100,6,2)),type = l)
seq(1)
seq(100)
plot(seq(100),log(seq(100)),type = l)
plot(seq(100),log(seq(100)),type = "l")
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
seq(1)
seq(100)
plot(seq(100),seq(log(100)))
plot(seq(100),log(seq(100)))
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
plot(seq(100),1/(seq(100))
plot(seq(100),1/(seq(100))
plot(seq(100),1/(seq(100)))
plot(seq(100),-1/(seq(100^2)))
plot(seq(100),-1/(seq(100)^2))
runApp('Desktop/Code/R Pro/Shiny/test_1')
shiny::runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
library(tidyverse)
datos <- data.frame(matrix(0, nrow = 100, ncol = 7))
colnames(datos) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
datos$Periodo <- 1:100
# Parámetros
k = 4
y = k^(0.5)
s = 0.3
c = y - s*y
inv = s*y
delta = 0.1
depre = delta*k
cambiok = s*y - delta*k
# Los ponemos como 1a observación
datos$k[1] = k
datos$y[1] = y
datos$c[1] = c
datos$inv[1] = inv
datos$dk[1] = depre
datos$Dk[1] = cambiok
for (j in 2:100) {
datos$k[j] <- datos$k[j-1] + datos$Dk[j-1]
datos$y[j] <- datos$k[j]^(0.5)
datos$c[j] <- datos$y[j]*(1-s)
datos$inv[j] <- s*datos$y[j]
datos$dk[j] <- delta*datos$k[j]
datos$Dk[j] <- datos$inv[j] - delta*datos$k[j]
}
datos %>% ggplot(aes(x=Periodo)) +
geom_point(aes(y=k)) +
geom_hline(yintercept = 9) +
theme_classic()
plot(Periodo,k,type = "o",main = "Primer gráfica")
plot(datos$Periodo,k,type = "o",main = "Primer gráfica")
View(datos)
plot(datos$Periodo,datos$k,type = "o",main = "Primer gráfica")
abline(v=15, col="blue")
$k,type = "o",main = "Primer gráfica",)
plot(datos$Periodo,datos$k,type = "o",main = "Primer gráfica",)
abline(v=15, col="blue")
#datos %>% ggplot(aes(x=Periodo)) +
#  geom_point(aes(y=k)) +
#  geom_hline(yintercept = 9) +
#  theme_classic()
abline(h=9, col="blue")
plot(datos$Periodo,datos$k,type = "o",main = "Primer gráfica",)
abline(h=9, col="blue")
#datos %>% ggplot(aes(x=Periodo)) +
#  geom_point(aes(y=k)) +
#  geom_hline(yintercept = 9) +
#  theme_classic()
plot(datos$Periodo,datos$k,type = "o",main = "Acumulación de capital k",
xlab="Perido", ylab="Capital (k)")
abline(h=9, col="blue")
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
datos <- data.frame(matrix(0, nrow = 100, ncol = 7))
View(datos)
colnames(datos) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
datos$Periodo <- 1:100
# Parámetros
k = 4
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
# Parámetros
k = 4
y = k^(0.5)
s = 0.3
c = y - s*y
inv = s*y
delta = 0.1
depre = delta*k
cambiok = s*y - delta*k
datos$k[1] = k
datos$y[1] = y
datos$c[1] = c
datos$inv[1] = inv
datos$dk[1] = depre
datos$Dk[1] = cambiok
datos$k[j] <- datos$k[j-1] + datos$Dk[j-1]
for (j in 2:100) {
datos$k[j] <- datos$k[j-1] + datos$Dk[j-1]
datos$y[j] <- datos$k[j]^(0.5)
datos$c[j] <- datos$y[j]*(1-s)
datos$inv[j] <- s*datos$y[j]
datos$dk[j] <- delta*datos$k[j]
datos$Dk[j] <- datos$inv[j] - delta*datos$k[j]
}
abline(h=9, col="blue")
plot(datos$Periodo,datos$k,type = "o",main = "Acumulación de capital (k)",
xlab="Perido", ylab="Capital (k)")
abline(h=9, col="blue")
datos2 <- data.frame(matrix(0, nrow = 100, ncol = 7))
colnames(datos2) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
datos2$Periodo <- 1:100
# Parámetros
k = 9
y = k^(0.5)
s = 0.7
c = y - s*y
inv = s*y
delta = 0.1
depre = delta*k
cambiok = s*y - delta*k
# Los ponemos como 1a observación
datos2$k[1] = k
datos2$y[1] = y
datos2$c[1] = c
datos2$inv[1] = inv
datos2$dk[1] = depre
datos2$Dk[1] = cambiok
for (j in 2:100) {
datos2$k[j] <- datos2$k[j-1] + datos2$Dk[j-1]
datos2$y[j] <- datos2$k[j]^(0.5)
datos2$c[j] <- datos2$y[j]*(1-s)
datos2$inv[j] <- s*datos2$y[j]
datos2$dk[j] <- delta*datos2$k[j]
datos2$Dk[j] <- datos2$inv[j] - delta*datos2$k[j]
}
datos2 %>% ggplot(aes(x=Periodo)) +
geom_point(aes(y=c))
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
library(tidyverse)
datos <- data.frame(matrix(0, nrow = 100, ncol = 7))
colnames(datos) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
datos$Periodo <- 1:100
# Parámetros
k = 4
y = k^(0.5)
s = 0.3
c = y - s*y
inv = s*y
delta = 0.1
depre = delta*k
cambiok = s*y - delta*k
# Los ponemos como 1a observación
datos$k[1] = k
datos$y[1] = y
datos$c[1] = c
datos$inv[1] = inv
datos$dk[1] = depre
datos$Dk[1] = cambiok
for (j in 2:100) {
datos$k[j] <- datos$k[j-1] + datos$Dk[j-1]
datos$y[j] <- datos$k[j]^(0.5)
datos$c[j] <- datos$y[j]*(1-s)
datos$inv[j] <- s*datos$y[j]
datos$dk[j] <- delta*datos$k[j]
datos$Dk[j] <- datos$inv[j] - delta*datos$k[j]
}
View(datos)
datos2 <- data.frame(matrix(0, nrow = 100, ncol = 7))
colnames(datos2) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
datos2$Periodo <- 1:100
# Parámetros
k = 9
y = k^(0.5)
s = 0.7
c = y - s*y
inv = s*y
delta = 0.1
depre = delta*k
cambiok = s*y - delta*k
# Los ponemos como 1a observación
datos2$k[1] = k
datos2$y[1] = y
datos2$c[1] = c
datos2$inv[1] = inv
datos2$dk[1] = depre
datos2$Dk[1] = cambiok
for (j in 2:100) {
datos2$k[j] <- datos2$k[j-1] + datos2$Dk[j-1]
datos2$y[j] <- datos2$k[j]^(0.5)
datos2$c[j] <- datos2$y[j]*(1-s)
datos2$inv[j] <- s*datos2$y[j]
datos2$dk[j] <- delta*datos2$k[j]
datos2$Dk[j] <- datos2$inv[j] - delta*datos2$k[j]
}
runApp('Desktop/Code/R Pro/Shiny/test_solow')
View(datos2)
runApp('Desktop/Code/R Pro/Shiny/test_solow')
solow_matriz1 <- function(k_0=4, s=0.3, alpha=0.5, delta=0.1, n=100) {
dfs <- data.frame(matrix(0, nrow = n, ncol = 7))
colnames(dfs) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
dfs$Periodo <- 1:n
# Parámetros
y = k_0^(0.5)
c = y - s*y
inv = s*y
depre = delta*k_0
cambiok = s*y - delta*k_0
# Los ponemos como 1a observación
dfs$k[1] = k_0
dfs$y[1] = y
dfs$c[1] = c
dfs$inv[1] = inv
dfs$dk[1] = depre
dfs$Dk[1] = cambiok
# Iteramos
for (j in 2:n) {
dfs$k[j] <- dfs$k[j-1] + dfs$Dk[j-1]
dfs$y[j] <- dfs$k[j]^(0.5)
dfs$c[j] <- dfs$y[j]*(1-s)
dfs$inv[j] <- s*dfs$y[j]
dfs$dk[j] <- delta*dfs$k[j]
dfs$Dk[j] <- dfs$inv[j] - delta*dfs$k[j]
}
# Imprimir la base creada
dfs
}
solow_matriz1(k_0 = 25, s = .5)
x <- solow_matriz1(k_0 = 25, s = .5)
y <- solow_matriz1(k_0 = 25, s = .7)
z <- rbind.data.frame(x[1:10,], y)
z$Periodo[1:110] <- 1:110
ggplot() +
geom_line(aes(Periodo, c, col="s=0.7"), data = z) +
geom_hline(yintercept = 2.5, linetype =2) +
theme_classic()
x <- solow_matriz1(k_0 = 25, s = .5)
y <- solow_matriz1(k_0 = 25, s = .7)
z <- rbind.data.frame(x[1:10,], y)
z$Periodo[1:110] <- 1:110
ggplot() +
geom_line(aes(Periodo, c, col="s=0.7"), data = z) +
geom_hline(yintercept = 2.5, linetype =2) +
theme_classic()
xx <- solow_matriz1(k_0 = 9, s = .3)
yy <- solow_matriz1(k_0 = 9, s = .45)
zz <- rbind.data.frame(xx[1:10,], yy)
zz$Periodo[1:110] <- 1:110
zz %>% ggplot(aes(Periodo)) +
geom_line(aes(y=c, col="Consumo")) +
geom_line(aes(y=inv, col="Inversión")) +
geom_line(aes(y=y, col="Producción")) +
geom_hline(yintercept = 2.1, linetype = 2) +
geom_vline(xintercept = 10, linetype = 2) +
theme_classic()
solow_matriz2 <- function(k_0=4, s=0.3, alpha=0.5, A=1,
delta=0.1, n=0, g=0, obs=100) {
dfs <- data.frame(matrix(0, nrow = obs, ncol = 7))
colnames(dfs) <- c("Periodo","k", "y", "c", "inv", "dk", "Dk")
dfs$Periodo <- 1:obs
# Parámetros
y = k_0^(0.5)
c = y - s*y
inv = s*y
depre = delta*k_0
cambiok = s*y - (delta+n+g)*k_0
# Los ponemos como 1a observación
dfs$k[1] = k_0
dfs$y[1] = y
dfs$c[1] = c
dfs$inv[1] = inv
dfs$dk[1] = depre
dfs$Dk[1] = cambiok
# Iteramos
for (j in 2:obs) {
dfs$k[j] <- dfs$k[j-1] + dfs$Dk[j-1]
dfs$y[j] <- dfs$k[j]^(0.5)
dfs$c[j] <- dfs$y[j]*(1-s)
dfs$inv[j] <- s*dfs$y[j]
dfs$dk[j] <- delta*dfs$k[j]
dfs$Dk[j] <- dfs$inv[j] - (delta+n+g)*dfs$k[j]
}
# Imprimir la base creada
dfs
}
x <- solow_matriz2(k_0 = 4, s = 0.3, alpha = .5, A = 1,
delta = 0.1, n = 0, g = 0, obs = 100)
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_1')
runApp('Desktop/Code/R Pro/Shiny/test_solow')
runApp('Desktop/Code/R Pro/Shiny/test_1')
shiny::runApp('Desktop/Code/R Pro/Shiny/test_solow')
